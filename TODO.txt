MILESTONES
===========

1. RenderState
------------
RenderState fully functional with Renderbuffer, TransforFeedback and
BufferedTexture.
Debug output from RenderState to show its connections.
A Demo application showcasing each.


2. Primitive creation
------------------
Find a simple way to manage creation of Primitives, possibly including
centralization of all RenderState and resource creation.
Write creation code for
	cube
	sphere
	axis
	transform controller


3. Virtual Texturing
-----------------


4. Mocap Animator
---------------


5. Skeleton Animator
------------------



6/1
====


5/1
====
Moved utility functions for Mem and Gem to their respective global files rather
that forcing them into a wrapper class.
New classes: FramebufferState, fully integrated
RenderState framebufffer object system
	renderState::setFramebuffer() etc


2-4/1
=====
Reworked RenderState class for full use of buffer objects
- A single RAM blob
- A single GPU blob (resident as a buffer)
- Multiple GPU bind points for the same buffer
	a buffer bound to framebuffer + bound as texture in the next frame
- load/save File <---> RAM blob
- upload/download RAM blob <---> OpenGL managed blob
- pack/unpack OpenGL managed blob <---> texture/framebuffer
new classes: VertexState, ProgramState, UniformState, TextureState
new classes: Tracker (used for state tracking)
Syntax highlighting for shaders


31/12
=====
Passthrough shaders for normal mesh with position, normal, texcoord


30/12
=====
Set up git with correct .gitignore
Set up release environment
Directory structure that works with NSIGHT and deployment
Proj1
|---Bin
|   |---Debug
|	|	|---Win32
|	|	|---Win64
|	|---Release
|		|---Win32
|		|---Win64
|---Data
|---Include
|---Out
|---Shaders
|---Src
Proj2
.
.
SolutionMSVC2012
|---Proj1
|---Proj2
.
.
SolutionGCC
.
.


29/12
=====
Enable BMP R8 och RGB8 rendering
Enable PFM R32F and RGB32F rendering
Solve the mipmap + DXT mess (RenderState::declareTextureData() for solution)
Create GEM_THROW() macro to throw runtime_error and change all catch clauses
TextureLoader::createMipLevels()
renderState::undeclareDexture()


28/12
=====
renderState texture system
	renderState::setTexture()
	renderState::declareTextures()
	remderState::bindTextures()


27/12
=====
class TextureLoader
	TextureLoader::load()
	TextureLoader::loadBMP()
	TextureLoader::loadPFM()
	TextureLoader::loadDXT1()
	TextureLoader::create()
	TextureLoader::save()
	TextureLoader::saveBMP()
	TextureLoader::savePFM()


26/12
======
renderstage::setUniform system
renderState::declareUniforms()
remderState::bindUniforms()


25/12
======
Allocator data progress system
1. writes sets isChanged flag, reads unsets flag
PRO: Very simple to use, just check isChanged() to know if data was updated
CON: ANY read will reset flag, so you might not get isChanged()==true where you
	 expect it.
2. same as 1 but let the application choose to reset the flag
PRO: Simple to use
CON: Only allows a single place for progress check.
3. keep track of writeCount counter, increase in all writes
PRO: The application can keep track of progress at any point in the code
CON: Harder to use, each application needs to save external counter to compare
	 against.
4. same as 3 but with reset functions
PRO: The application can keep track of progress at any point in the code
	 Simple to use, no external variables required.
CON: One place of reset means you can't have multiple points where you check 
     progress.
Implemented #4


22/12
======
meshloader::save
meshloader::reload
shaderloader::loader
GLOABL ERROR SYSTEM
bind vertex attributes (done generically, use layout specifier to access)





